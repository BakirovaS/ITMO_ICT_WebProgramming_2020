# Generated by Django 3.0.4 on 2020-06-17 15:07

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('make', models.CharField(max_length=50)),
                ('model', models.CharField(max_length=50)),
                ('colour', models.CharField(choices=[('r', 'red'), ('o', 'orange'), ('y', 'yellow'), ('g', 'green'), ('b', 'blue'), ('p', 'purple'), ('pk', 'pink'), ('r', 'red'), ('bk', 'black'), ('gy', 'grey'), ('w', 'white'), ('bn', 'brown'), ('m', 'multicolour')], max_length=2)),
                ('reg_plate', models.CharField(max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('date_of_birth', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Ownership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_begin', models.DateField()),
                ('date_end', models.DateField()),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project_first_app.Car')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project_first_app.Owner')),
            ],
        ),
        migrations.CreateModel(
            name='Driver_license',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=10)),
                ('date_given', models.DateField()),
                ('type', models.CharField(choices=[('A', 'A: motorcycle; tricycle; quadricycle; engine capacity<50cm^2; weight<400kg'), ('A1', 'A1: motorcycle; tricycle; weight<550kg'), ('B', 'B: car'), ('B1', 'B1: tricycle; quadricycle; weight<550kg, engine capacity<50cm^2'), ('C', 'C: truck; weight>3500kg; trailer<750kg'), ('C1', 'C1: truck; 3500<weight<7500kg; trailer<750kg'), ('D', 'D: passenger vehicle; trailer<750kg; seats>8'), ('D1', 'D1: passenger vehicle; trailer<750kg; 8<seats<16'), ('BE', 'BE: car with trailer'), ('CE', 'CE: truck; weight>3500kg; trailer>750kg'), ('C1E', 'C1E: truck; trailer>750kg; truck+trailer<12000kg'), ('DE', 'DE: passenger vehicle; trailer>750kg OR articulated bus'), ('D1E', 'D1E: bus not for passengers; trailer>750kg'), ('M', 'M: quadricycle; scooter; weight<350kg; engine capacity<50cm^2 '), ('Tm', 'Tm: tram'), ('Tb', 'Tb: trolleybus')], max_length=3)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project_first_app.Owner')),
            ],
        ),
        migrations.AddField(
            model_name='car',
            name='owned_by',
            field=models.ManyToManyField(through='project_first_app.Ownership', to='project_first_app.Owner'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
